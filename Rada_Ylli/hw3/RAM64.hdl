// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
DMux8Way(in=load, sel= address[0..2], a=a , b=b , c=c , d=d , e=e , f=f , g=g , h=h );
//remember how in dmux you needed a lot of selectors one for each row
// ur using the same thing now and you only need 6 because you only need 8 loads
// than comes the adress 3 to 5 this is because now we need to go inside of each of the rams and #
// get the needed register. after this you are going to use the mux 8 way to get the one you need
// it uses 0to..2 addres because noww inside of each register we have on;y one register
// by pickiung the right ram therefore you pick the right register

    RAM8(in=in , load=a , address=address[3..5] , out=rama );
    RAM8(in=in , load=b , address=address[3..5] , out=ramb );
    RAM8(in=in , load=c , address=address[3..5] , out=ramc );
    RAM8(in=in , load=d , address=address[3..5] , out=ramd );
    RAM8(in=in , load=e , address=address[3..5] , out=rame );
    RAM8(in=in , load=f , address=address[3..5] , out=ramf );
    RAM8(in=in , load=g , address=address[3..5] , out=ramg );
    RAM8(in=in , load=h , address=address[3..5] , out=ramh );

    Mux8Way16(a=rama , b=ramb , c=ramc , d=ramd , e=rame , f=ramf , g=ramg , h=ramh , sel=address[0..2] , out=out );

}